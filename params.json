{"name":"Quickutils","tagline":"My own set of utils for Android applications","body":"## QuickUtils\r\n\r\nQuickUtils is a development library for the Android platform.\r\nIt is intended to make application development easier and consistent through your applications.\r\n\r\n\r\n![](https://dl.dropbox.com/u/86831/cesarferreira/nexus_header2.jpg)\r\n\r\n<!--\r\nKeep in mind this is still a work in progress. There are thousands of things to do and I hope we'll have enough time to develop all of the features we have in mind :)\r\n\r\n[![](http://lh4.ggpht.com/_OHO4y8YcQbs/TQFQZTft6OI/AAAAAAAAMpY/hAloaii6kRA/s288/gd7.png)](http://lh4.ggpht.com/_OHO4y8YcQbs/TQFQZTft6OI/AAAAAAAAMpY/hAloaii6kRA/s800/gd7.png)\r\n[![](https://lh6.googleusercontent.com/-DuebAvhlkYo/Ted7VA4WzoI/AAAAAAAAMvc/fs9IRD4ZtgU/s288/gd8.png)](https://lh6.googleusercontent.com/-DuebAvhlkYo/Ted7VA4WzoI/AAAAAAAAMvc/fs9IRD4ZtgU/s800/gd8.png)\r\n[![](https://lh6.googleusercontent.com/-oQoXEMJcO0E/Ted7UeGFemI/AAAAAAAAMvY/HpfJVIVE6-4/s288/gd9.png)](https://lh6.googleusercontent.com/-oQoXEMJcO0E/Ted7UeGFemI/AAAAAAAAMvY/HpfJVIVE6-4/s800/gd9.png)\r\n[![](http://lh6.ggpht.com/_OHO4y8YcQbs/TQFQTfazM2I/AAAAAAAAMpQ/lgPpIKImdZw/s288/gd5.png)](http://lh6.ggpht.com/_OHO4y8YcQbs/TQFQTfazM2I/AAAAAAAAMpQ/lgPpIKImdZw/s800/gd5.png)\r\n[![](http://lh3.ggpht.com/_OHO4y8YcQbs/TQFQS5hyrKI/AAAAAAAAMpM/4hqL9y_tVgM/s288/gd4.png)](http://lh3.ggpht.com/_OHO4y8YcQbs/TQFQS5hyrKI/AAAAAAAAMpM/4hqL9y_tVgM/s800/gd4.png)\r\n-->\r\nA sample application can be downloaded on the [Android Market](blabla)\r\n\r\n\r\n\r\n## Install\r\n\r\nVia **github**:\r\n\r\n1. Check a clone of this repo: `git@github.com:cesarferreira/AndroidQuickUtils.git`\r\n2. Import the **`QuickUtils`** project into Eclipse\r\n3. Open your project properties\r\n4. Go to Android\r\n5. Add **QuickUtils** as a `Library`\r\n\r\nOr via **download**:\r\n\r\n1. Download the latest `quickutils.jar` from [here](https://github.com/cesarferreira/AndroidQuickUtils/tags)\r\n2. Create a `lib/` folder in your project and add the `jar`\r\n3. Inside Eclipse Right Click the jar and `Build Path -> Add to Build Path`\r\n\r\n\r\n\r\n**Note:**\r\nif you use the `install via github`, all you need to do to get the latest version of **QuickUtills** is `git pull` on the root of its directory. If you use the second method you need to download the newest version and re-add the `.jar`.\r\n\r\n## Downloads\r\nAll the versions can be found [here](https://github.com/cesarferreira/AndroidQuickUtils/tags)\r\n\r\n\r\n## How to Use\r\n**Note:** There is a sample application in the folder **demos** with examples for all the methods.\r\n\r\n\r\n\r\nReally simple usage, you just need to specify the category and the method you want to use.\r\n\r\n```java\r\nQuickUtils.__category__.__method__\r\n```\r\n-------------------\r\n\r\n## LOG <sub><sup>`category`</sup></sub>\r\n\r\nWith this methods you don't need to set the TAG variable in every class of your project and you can disable the logs everywhere without deleting/commenting the log lines by setting the debug mode to PRODUCTION (explained in the previous section).\r\n\r\n```java\r\nQuickUtils.log.__method__\r\n```\r\n\r\n\r\n### Error Log \r\n\r\n```java\r\nQuickUtils.log.e(\"error description\");\r\n```\r\n\r\n```java\r\nQuickUtils.log.e(\"error description\", throwable);\r\n```\r\n\r\n### Verbose Log \r\n\r\n```java\r\nQuickUtils.log.v(\"verbose description\");\r\n```\r\n\r\n```java\r\nQuickUtils.log.v(\"verbose description\", throwable);\r\n```\r\n\r\n### Information Log \r\n\r\n```java\r\nQuickUtils.log.i(\"information description\");\r\n```\r\n```java\r\nQuickUtils.log.i(\"information description\", throwable);\r\n```\r\n\r\n### Warning Log \r\n\r\n```java\r\nQuickUtils.log.w(\"warning description\");\r\n```\r\n```java\r\nQuickUtils.log.w(\"warning description\", throwable);\r\n```\r\n\r\n### Debug Log \r\n\r\n```java\r\nQuickUtils.log.d(\"debug description\");\r\n```\r\n\r\n```java\r\nQuickUtils.log.d(\"debug description\", throwable);\r\n```\r\n\r\n------------\r\n\r\n## DATE <sub><sup>`category`</sup></sub>\r\n\r\nDate Utils\r\n\r\n```java\r\nQuickUtils.date.__method__\r\n```\r\n\r\n### Get the current time in milliseconds `long`\r\n\r\n```java\r\nQuickUtils.date.getCurrentTimeInMiliseconds();\r\n```\r\n\r\n### Get the current time in seconds `long`\r\n\r\n```java\r\nQuickUtils.date.getCurrentTimeInSeconds();\r\n```\r\n\r\n### Gets a date with a desired format as a String `String`\r\nThey \"day\" parameter can be provided as: \r\n- `QuickUtils.date.YESTERDAY`, \r\n- `QuickUtils.date.TODAY` or \r\n- `QuickUtils.date.TOMORROW`\r\n\r\nThe format can be provided as e.g. \"yyyy-MM-dd HH:mm:ss\"\r\n\r\n```java\r\nQuickUtils.date.getDayAsString(int day, String format);\r\n```\r\n\r\n### Gets the desired day as a Date `Date`\r\nThey \"day\" parameter can be provided as:\r\n- `QuickUtils.date.YESTERDAY`, \r\n- `QuickUtils.date.TODAY` or \r\n- `QuickUtils.date.TOMORROW`\r\n\r\n```java\r\nQuickUtils.date.getDayAsDate(int day);\r\n```\r\n\r\n\r\n------------\r\n\r\n## MISC <sub><sup>`category`</sup></sub>\r\n\r\nMisc utils\r\n\r\n\r\n```java\r\nQuickUtils.misc.__method__\r\n```\r\n\r\n### Toast method with short duration `void`\r\n\r\n```java\r\nQuickUtils.misc.toast(context, \"This is a short toast\");\r\n```\r\n\r\n### Toast with non specified duration `void`\r\nEither `Toast.LENGTH_SHORT` or `Toast.LENGTH_LONG`\r\n\r\n```java\r\nQuickUtils.misc.toast(context, \"This is a short toast\", Toast.LENGTH_LONG);\r\n```\r\n\r\n### Sleep `void`\r\nCauses the thread which sent this message to sleep for the given interval of time (given in milliseconds). The precision is not guaranteed - the Thread may sleep more or less than requested.\r\n\r\n```java\r\nQuickUtils.misc.sleep(durationInMilliseconds);\r\n```\r\n\r\n### Start google activity of speechRecognition \r\nneeded on onActivityResult(int requestCode, int resultCode, Intent data) to call getSpeechRecognitionResults() to get the results)\r\n\r\n```java\r\nQuickUtils.misc.speechRecognition(final Activity activity, int maxResults, String text);\r\n```\r\n\r\n### Get all results from the Google Speech Recognition activity \r\nTo be called onActivityResult()\r\nReturn an ArrayList<String> with all results or null if was not possible to get any results\r\n\r\n```java\r\nQuickUtils.misc.getSpeechRecognitionResults(int requestCode, int resultCode, Intent data);\r\n```\r\n\r\n### Get the first result that matches the Result List from Google Speech Recognition activity and the Dictionary given\r\nTo be called onActivityResult() \r\nReturn a String with the first result matched or null if was not possible to get any result\r\n\r\n```java\r\nQuickUtils.misc.getSpeechRecognitionResultFromDicionary(int requestCode, int resultCode, Intent data, ArrayList<String> array);\r\n```\r\n\r\n### Get first result from the Google Speech Recognition activity \r\nTo be called onActivityResult() \r\nReturn a string containing the first result of what was recognized\r\n\r\n```java\r\nQuickUtils.misc.getSpeechRecognitionFirstResult(int requestCode, int resultCode, Intent data);\r\n```\r\n\r\n------------\r\n\r\n## MATH <sub><sup>`category`</sup></sub>\r\n\r\nMath Utils.\r\n\r\n```java\r\nQuickUtils.math.__method__\r\n```\r\n\r\n### Returns a random number `int`\r\nA random int between MIN inclusive and MAX exclusive.\r\n\r\n```java\r\nQuickUtils.math.getRandomNumber(int min, int max);\r\n```\r\n\r\n### Check if a number is Odd `boolean`\r\nTrue if the num is odd and false if it's even\r\n\r\n```java\r\nQuickUtils.math.isOdd(int num);\r\n```\r\n\r\n### Check if a number is Even `boolean`\r\nTrue if the num is even and false if it's odd\r\n\r\n```java\r\nQuickUtils.math.isEven(int num);\r\n```\r\n\r\n### Degrees to radians `float`\r\nReturns the converted value\r\n\r\n```java\r\nQuickUtils.math.degreesToRadians(float degrees);\r\n```\r\n\r\n### Radians to degrees `float`\r\nReturns the converted value\r\n\r\n```java\r\nQuickUtils.math.radiansTdoDegrees(float radians);\r\n```\r\n\r\n### Arc cosine `float`\r\nReturns the closest double approximation of the arc cosine of the argument within the range [0..pi]. The returned result is within 1 ulp (unit in the last place) of the real result.\r\n\r\n```java\r\nQuickUtils.math.acos(float value);\r\n```\r\n\r\n### Arc sine `float`\r\nReturns the closest double approximation of the arc sine of the argument within the range [-pi/2..pi/2]. The returned result is within 1 ulp (unit in the last place) of the real result.\r\n\r\n```java\r\nQuickUtils.math.asin(float value);\r\n```\r\n\r\n### Arc tangent `float`\r\nReturns the closest double approximation of the arc tangent of the argument within the range [-pi/2..pi/2]. The returned result is within 1 ulp (unit in the last place) of the real result.\r\n\r\n```java\r\nQuickUtils.math.atan(float value);\r\n```\r\n### Arc tangent of y/x within the range [-pi..pi] `float`\r\nReturns the closest double approximation of the arc tangent of y/x within the range [-pi..pi]. This is the angle of the polar representation of the rectangular coordinates (x,y). The returned result is within 2 ulps (units in the last place) of the real result.\r\n\r\n```java\r\nQuickUtils.math.atan2(float value);\r\n```\r\n\r\n### Tangent of an angle `float`\r\nReturns the tangent\r\n\r\n```java\r\nQuickUtils.math.tan(float angle);\r\n```\r\n### Absolute value `float`\r\nReturns the absolute value\r\n\r\n```java\r\nQuickUtils.math.abs(float v);\r\n```\r\n\r\n### Number's logarithm `float`\r\nReturns the closest double approximation of the natural logarithm of the argument. The returned result is within 1 ulp (unit in the last place) of the real result.\r\n\r\n```java\r\nQuickUtils.math.logarithm(float number);\r\n```\r\n### Number's Exponencial `float`\r\nReturns the closest double approximation of the natural logarithm of the argument. The returned result is within 1  ulp (unit in the last place) of the real result.\r\n\r\n```java\r\nQuickUtils.math.exponencial(float number);\r\n```\r\n\r\n### Gets the higher number `float` `int`\r\nthe higher number between a and b\r\n\r\n```java\r\nQuickUtils.math.max(float a, float b);\r\n```\r\n\r\n```java\r\nQuickUtils.math.max(int a, int b);\r\n```\r\n\r\n### Gets the lower number `float` `int`\r\nthe lower number between a and b\r\n\r\n```java\r\nQuickUtils.math.min(float a, float b);\r\n```\r\n\r\n```java\r\nQuickUtils.math.min(int a, int b);\r\n```\r\n\r\n------------\r\n\r\n## WEB <sub><sup>`category`</sup></sub>\r\n\r\nWeb Utils.\r\n\r\n```java\r\nQuickUtils.web.__method__\r\n```\r\n\r\n\r\n### Set wireless connectivity On\r\nalso this method will need the permissions \"android.permission.CHANGE_WIFI_STATE\" and \"android.permission.ACCESS_WIFI_STATE\"\r\ntrue if was set successfully and false if it wasn't\r\n\r\n```java\r\nQuickUtils.web.changeWirelessState(Context context, boolean state);\r\n```\r\n\r\n### Check if can connect to the server\r\nalso this method will need the permissions \"android.permission.INTERNET\"\r\ntrue if the connection returned a successful code\r\n\r\n```java\r\nQuickUtils.web.checkServerConnection(URL u);\r\n```\r\n\r\n### Check if can connect to the server\r\nalso this method will need the permissions \"android.permission.INTERNET\"\r\ntrue if the connection returned a successful code\r\n\r\n```java\r\nQuickUtils.web.checkServerConnection(String serverURL);\r\n```\r\n\r\n###\r\n\r\n```java\r\nQuickUtils.web.hasInternetConnection(Context context);\r\n```\r\n\r\n### Does a GET request to a given url `String`\r\nNote: Please use this method on an AsyncTask in order not to freeze the application unnecessarely  (http://developer.android.com/guide/practices/responsiveness.html)\r\n\r\n```java\r\nQuickUtils.web.HTTPGetRequest(String url);\r\n```\r\n\r\n------------\r\n\r\n## SDCARD <sub><sup>`category`</sup></sub>\r\n\r\nSDCard Utils.\r\n\r\n```java\r\nQuickUtils.sdcard.__method__\r\n```\r\n\r\n### Check if the SD Card is Available `boolean`\r\nTrue if the sd card is available and false if it is not\r\n\r\n```java\r\nQuickUtils.sdcard.isSDCardAvailable();\r\n```\r\n\r\n### Check if the SD Card is Writable `boolean`\r\nTrue if the sd card is writable and false if it is not\r\n\r\n```java\r\nQuickUtils.sdcard.isSDCardWritable();\r\n```\r\n\r\n### Get the path to the SDCard `String`\r\nReturn the complete path to the SDCard\r\n\r\n```java\r\nQuickUtils.sdcard.getSDCardPath();\r\n```\r\n\r\n### Check if file exists on SDCard or not\r\nboolean - if file exist on SDCard or not\r\n\r\n```java\r\nQuickUtils.sdcard.checkIfFileExists(String filePath)\r\n```\r\n\r\n### Copy a file from a place to another `void`\r\nCreates the specified `toFile` as a byte for byte copy of  the `fromFile`. If `toFile` already exists, then it will be replaced with a copy of `fromFile`. The name and path of`toFile` will be that of `toFile`.\r\n\r\nNote: `fromFile` and `toFile` will be closed by this function.\r\n\r\n\r\nAs Files\r\n\r\n```java\r\nQuickUtils.sdcard.copyFile(fromFile, toFile);\r\n```\r\n\r\nor with Input and Output Streams:\r\n\r\n```java\r\nQuickUtils.sdcard.copyFile(fromFileInputStream, toFileOutputStream);\r\n```\r\n\r\n\r\n## Setting up the environment\r\nSet the default TAG for logcat debug purposes\r\n\r\n```java\r\nQuickUtils.setTAG(\"DESIRED_TAG\");\r\n```\r\n\r\n\r\n### Debug mode\r\n\r\nTo enable the log outputs (This is the default behavior of the library so you don't need to set this up).\r\n\r\n```java\r\nQuickUtils.setDebugMode(QuickUtils.DEVELOPER_MODE);\r\n```\r\n\r\nWhen the application is ready to go and you want to disable the log outputs.\r\n\r\n```java\r\nQuickUtils.setDebugMode(QuickUtils.PRODUCTION_MODE);\r\n```\r\n\r\nAndroidManifest.xml\r\n-------------------\r\n\r\nIf you intend to use the vibration util don't forget to add the vibration permission, if you haven't already, in your `<manifest>`:\r\n\r\n```xml\r\n<uses-permission android:name=\"android.permission.VIBRATE\" />   \r\n```\r\n\r\nIf you intend to use the `hasConnectivity` method don't forget to add the network state access permission, if you haven't already, in your `<manifest>`:\r\n\r\n```xml\r\n<uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\r\n```\r\n\r\nIf you intend to use the `HTTPGetRequest` method, if you haven't already, in your `<manifest>`:\r\n\r\n```xml\r\n<uses-permission android:name=\"android.permission.INTERNET\" />\r\n```\r\n\r\n\r\n\r\n\r\n## Contributing\r\n\r\nWant to contribute? Great! \r\n\r\n1. Fork it.\r\n2. Create a branch (`git checkout -b my_branch`)\r\n3. Commit your changes (`git commit -am \"Added changes\"`)\r\n4. Push to the branch (`git push origin my_branch`)\r\n5. Create an [Issue](https://github.com/cesarferreira/AndroidQuickUtils/issues) with a link to your branch\r\n6. Enjoy a refreshing Diet Coke and wait\r\n\r\n\r\n## License\r\nApache License, Version 2.0 (http://www.apache.org/licenses/LICENSE-2.0.html)\r\n\r\n## Authors\r\n * César Ferreira (cesar.manuel.ferreira@gmail.com)\r\n\r\n## Contributors <sup>([graph](https://github.com/cesarferreira/AndroidQuickUtils/graphs/contributors \"link\"))</sup>\r\n * César Ferreira (cesar.manuel.ferreira@gmail.com)\r\n * Luís Pereira (luispereira268@gmail.com)\r\n","google":"UA-18248446-3","note":"Don't delete this file! It's used internally to help with page regeneration."}